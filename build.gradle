buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.beryx:badass-runtime-plugin:1.12.5'
    }
}

plugins {
    id 'application'
    id 'groovy'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.runtime' version '1.12.5'
}

apply plugin: 'org.beryx.runtime'

repositories {
    mavenCentral()
}

javafx {
    version = '17.0.2'
    modules = ['javafx.base', 'javafx.controls', 'javafx.graphics', 'javafx.fxml']
}

application {
    mainClass = 'org.tools4j.tabular.javafx.Launcher'
    applicationName = 'tabular'
}

tasks.named('test') {
    useJUnitPlatform()
}

group 'org.tools4j'
version '5.2'

dependencies {
    implementation 'com.opencsv:opencsv:5.7.1'
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.20.0'
    implementation 'com.airhacks:afterburner.fx:1.6.0'
    implementation 'com.github.tulskiy:jkeymaster:1.3'
    implementation 'javax.inject:javax.inject:1'
    implementation ('org.codehaus.groovy:groovy-all:2.5.21') {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.testng', module: 'testng'
    }
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.apache.lucene:lucene-core:8.3.0'
    implementation 'org.apache.lucene:lucene-queryparser:8.3.0'
    implementation 'org.apache.commons:commons-text:1.10.0'
    implementation 'org.freemarker:freemarker:2.3.32'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.3'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'net.java.dev.jna:jna:5.7.0'
    implementation 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    testImplementation 'junit:junit:4.13'
    testImplementation 'org.spockframework:spock-core:2.3-groovy-2.5'
    testImplementation 'org.hamcrest:hamcrest-core:1.3'
    testImplementation 'org.tools4j:groovy-tables:1.6'
    testImplementation 'cglib:cglib-nodep:3.1'
    testImplementation 'org.objenesis:objenesis:2.1'
}

test {
    useJUnitPlatform()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}

// JAR START

jar {
    archiveFileName.set('tabular.jar')
    manifest {
        attributes 'Main-Class': 'org.tools4j.tabular.javafx.Main'
    }
}

runtime {
    modules = [
            'javafx.base',
            'javafx.controls',
            'javafx.graphics',
            'javafx.fxml'
    ]
    options = [
            '--strip-debug',
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages'
    ]
}

// Custom task to download JavaFX libraries
task downloadJavaFXLibraries {
    def javafxVersion = javafx.version
    def downloadDir = file("$buildDir/javafx-libs")

    inputs.property('javafxVersion', javafxVersion)
    outputs.dir(downloadDir)

    doLast {
        if (!downloadDir.exists()) {
            println "Downloading JavaFX SDK $javafxVersion for ${osName()} from GluonHQ"
            downloadDir.mkdirs()
            //def url = "https://download2.gluonhq.com/openjfx/${javafxVersion}/openjfx-${javafxVersion}_${osName()}-x64_bin-sdk.zip"
            def url = "https://download2.gluonhq.com/openjfx/${javafxVersion}/openjfx-${javafxVersion}_osx-aarch64_bin-sdk.zip"
            ant.get(src: url, dest: "$downloadDir/javafx-sdk.zip")
            ant.unzip(src: "$downloadDir/javafx-sdk.zip", dest: downloadDir)
        } else {
            println "Directory $downloadDir already exists, skipping download."
        }
    }
}

// Task to run the application
task runApplication(type: Exec){//dependsOn: 'downloadJavaFXLibraries', type: Exec) {
    group = 'application'
    description = 'Run the application'

    doFirst {
        def os = osName()
        def javaDir = file("$buildDir/javafx-libs/javafx-sdk-${javafx.version}/lib")
        def cmd = ''

        switch (os) {
            case 'mac':
                cmd = "java -cp $javaDir/*:$buildDir/libs/tabular.jar ${application.mainClass.get()}"
                break
            case 'win':
                cmd = "java -cp $javaDir/*;$buildDir/libs/tabular.jar ${application.mainClass.get()}"
                break
            case 'lin':
                cmd = "java -cp $javaDir/*:$buildDir/libs/tabular.jar ${application.mainClass.get()}"
                break
        }

        commandLine 'sh', '-c', cmd
    }
}

// Helper method to detect OS
def osName() {
    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isWindows()) {
        return 'win'
    } else if (os.isMacOsX()) {
        return 'mac'
    } else if (os.isLinux()) {
        return 'lin'
    }
    return 'unknown'
}

task createTabularExampleZip(type: Zip) {
    doFirst {
        println "=================================="
        println "${projectDir}/example"
    }
    from "${projectDir}/example"
    include '**/*'
    archiveFileName = "tabular-example-${version}.zip"
    destinationDirectory = file('dist')
}

task copyTabularZipToDistDirectory(type: Copy) {
    from 'build/dist/zip/'
    into 'dist/'
}

task cleanStagingArea(type: Delete) {
    delete 'build/dist'
}