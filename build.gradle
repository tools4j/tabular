group 'org.tools4j'
version '3.2'

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'javafx-gradle-plugin'

buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'de.dynamicfiles.projects.gradle.plugins:javafx-gradle-plugin:8.8.2'
    }
}

repositories {
    mavenCentral()
}

jfx {
    jfxMainAppJarName = "tabular.jar"
    mainClass = 'org.tools4j.tabular.javafx.Main'
    vendor = 'Ben Warner'
}

dependencies {
    compile 'com.opencsv:opencsv:4.0'
    compile 'log4j:log4j:1.2.16'
    compile 'com.airhacks:afterburner.fx:1.6.0'
    compile 'com.github.tulskiy:jkeymaster:1.2'
    compile 'com.google.guava:guava:23.3-jre'
    compile 'org.codehaus.groovy:groovy-all:2.4.10'
    compile 'commons-io:commons-io:2.6'
    compile 'org.apache.lucene:lucene-core:8.3.0'
    compile 'org.apache.lucene:lucene-queryparser:8.3.0'
    compile 'org.apache.commons:commons-text:1.10.0'

    testCompile 'junit:junit:4.4'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.tools4j:groovy-tables:1.6'
    testCompile 'org.testfx:testfx-core:4.0.15-alpha'
    testCompile 'org.testfx:testfx-junit:4.0.15-alpha'

    testRuntime 'cglib:cglib-nodep:3.1'          // allows mocking of classes (in addition to interfaces)
    testRuntime 'org.objenesis:objenesis:2.1'    // allows mocking of classes without default constructor (together with CGLIB)
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task copyAdditionalResources(type: Copy) {
    from 'src/main/dist'
    into 'build/dist/files'
}

task copyAdditionalLibs(type: Copy) {
    from 'lib'
    into 'build/dist/files/lib'
}

task copyJfxFiles(type: Copy) {
    from 'build/jfx/app'
    into 'build/dist/files'
}

task createTabularZip(type: Zip) {
    from 'build/dist/files'
    include '*'
    include '*/*'
    archiveName "tabular-${version}.zip"
    destinationDir(file('build/dist/zip/'))
}


task buildTabularZip {
    group 'build'
    description 'Produces the Tabular zip file.'
    doLast {
        println 'Done!'
    }
}

task copyTabularZipToDistDirectory(type: Copy) {
    from 'build/dist/zip/'
    into 'dist/'
}

buildTabularZip.dependsOn createTabularZip
buildTabularZip.dependsOn copyAdditionalResources
buildTabularZip.dependsOn copyAdditionalLibs
buildTabularZip.dependsOn copyJfxFiles
buildTabularZip.dependsOn jfxJar
buildTabularZip.dependsOn copyTabularZipToDistDirectory
createTabularZip.dependsOn copyAdditionalResources
createTabularZip.dependsOn copyJfxFiles
copyJfxFiles.dependsOn jfxJar
copyTabularZipToDistDirectory.dependsOn createTabularZip