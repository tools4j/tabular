plugins {
    id 'application'
    id 'groovy'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'org.beryx.runtime' version '1.12.0'
}

repositories {
    mavenCentral()
}

javafx {
    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.fxml' ]
}

application {
    mainClass = 'org.tools4j.tabular.javafx.Launcher'
    applicationName = 'tabular'
}

tasks.named('test') {
    useJUnitPlatform() 
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    targetPlatform("win") {
        jdkHome = 'C:/dev/apps/java/jdk-11.0.10'
    }

    launcher {
        noConsole = false
    }
    
    jpackage {
        // Uncomment and adjust the following line if your runtime task is configured to generate images for multiple platforms
        // targetPlatformName = "mac"

        installerOptions += ['--resource-dir', "src/main/resources"]
        installerOptions += ['--vendor', 'Acme Corporation']
        installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
    }
}

group 'org.tools4j'
version '4.9'

dependencies {
    implementation 'com.opencsv:opencsv:5.7.1'
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.20.0'
    implementation 'com.airhacks:afterburner.fx:1.6.0'
    implementation 'com.github.tulskiy:jkeymaster:1.3'
    implementation 'javax.inject:javax.inject:1'
    implementation('org.codehaus.groovy:groovy-all:2.5.21'){
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.testng', module: 'testng'
    }
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.apache.lucene:lucene-core:8.3.0'
    implementation 'org.apache.lucene:lucene-queryparser:8.3.0'
    implementation 'org.apache.commons:commons-text:1.10.0'
    implementation 'org.freemarker:freemarker:2.3.32'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.3'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.spockframework:spock-core:2.3-groovy-2.5'
    testImplementation 'org.hamcrest:hamcrest-core:1.3'
    testImplementation 'org.tools4j:groovy-tables:1.6'

    testImplementation 'cglib:cglib-nodep:3.1'          // allows mocking of classes (in addition to interfaces)
    testImplementation 'org.objenesis:objenesis:2.1'    // allows mocking of classes without default constructor (together with CGLIB)
}

test {
    useJUnitPlatform()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}

//JAR START

jar {
    archiveFileName.set('tabular.jar')
    manifest {
        attributes 'Main-Class': 'org.tools4j.tabular.javafx.Main'
    }
}

task copyDependencyJarsToStagingArea(type: Copy) {
    into "build/dist/files/lib"
    from(sourceSets.main.runtimeClasspath){ include '*.jar' }
}

task copyAdditionalResourcesToStagingArea(type: Copy) {
    from 'src/main/dist'
    into 'build/dist/files'
}

task copyTabularJarToStagingArea(type: Copy) {
    from 'build/libs/tabular.jar'
    into 'build/dist/files'
}

task createTabularZip(type: Zip) {
    from 'build/dist/files'
    include '*'
    include '*/*'
    archiveFileName = "tabular-${version}.zip"
    destinationDirectory = layout.buildDirectory.dir('dist/zip/')
}

task buildTabularZip {
    group 'build'
    description 'Produces the Tabular zip file.'
    doLast {
        println 'Done!'
    }
}

task copyTabularZipToDistDirectory(type: Copy) {
    from 'build/dist/zip/'
    into 'dist/'
}

task cleanStagingArea(type: Delete) {
    delete 'build/dist'
}

//JAR END

//JRE ZIP START

task copyTabularImageToDistDirectory(type: Copy) {
    from "build/image-win.zip"
    into "dist/"
    rename { filename -> 
        "tabular-with-jre-${version}.zip"
    }
}

//JRE ZIP END

task buildTabularZipAndImage() {
    group 'build'
}


jar.dependsOn cleanStagingArea
copyTabularJarToStagingArea.dependsOn jar
copyDependencyJarsToStagingArea.dependsOn copyTabularJarToStagingArea
copyAdditionalResourcesToStagingArea.dependsOn copyDependencyJarsToStagingArea
createTabularZip.dependsOn copyAdditionalResourcesToStagingArea
copyTabularZipToDistDirectory.dependsOn createTabularZip
buildTabularZip.dependsOn copyTabularZipToDistDirectory

copyTabularImageToDistDirectory.dependsOn runtimeZip
buildTabularZipAndImage.dependsOn buildTabularZip
buildTabularZipAndImage.dependsOn copyTabularImageToDistDirectory