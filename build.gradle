buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'de.dynamicfiles.projects.gradle.plugins:javafx-gradle-plugin:8.8.2'
    }
}

plugins {
  id 'com.github.jk1.dependency-license-report' version '1.17'
}

group 'org.tools4j'
version '4.2'

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'javafx-gradle-plugin'

repositories {
    mavenCentral()
}

jfx {
    jfxMainAppJarName = "tabular.jar"
    mainClass = 'org.tools4j.tabular.javafx.Main'
    vendor = 'Ben Warner'
}

dependencies {
    compile 'com.opencsv:opencsv:5.7.1'
    compile 'org.slf4j:slf4j-api:1.7.36'
    compile 'org.apache.logging.log4j:log4j-core:2.20.0'
    compile 'org.apache.logging.log4j:log4j-api:2.20.0'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.20.0'
    compile 'com.airhacks:afterburner.fx:1.6.0'
    compile 'com.github.tulskiy:jkeymaster:1.3'
    compile('org.codehaus.groovy:groovy-all:2.5.21'){
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.testng', module: 'testng'
    }
    compile 'commons-io:commons-io:2.11.0'
    compile 'org.apache.lucene:lucene-core:8.3.0'
    compile 'org.apache.lucene:lucene-queryparser:8.3.0'
    compile 'org.apache.commons:commons-text:1.10.0'

    testCompile 'junit:junit:4.13'
    testCompile 'org.spockframework:spock-core:2.3-groovy-2.5'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.tools4j:groovy-tables:1.6'

    testRuntime 'cglib:cglib-nodep:3.1'          // allows mocking of classes (in addition to interfaces)
    testRuntime 'org.objenesis:objenesis:2.1'    // allows mocking of classes without default constructor (together with CGLIB)
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task copyAdditionalResources(type: Copy) {
    from 'src/main/dist'
    into 'build/dist/files'
}

task copyAdditionalLibs(type: Copy) {
    from 'lib'
    into 'build/dist/files/lib'
}

task copyJfxFiles(type: Copy) {
    from 'build/jfx/app'
    into 'build/dist/files'
}

task createTabularZip(type: Zip) {
    from 'build/dist/files'
    include '*'
    include '*/*'
    archiveName "tabular-${version}.zip"
    destinationDir(file('build/dist/zip/'))
}

task buildTabularZip {
    group 'build'
    description 'Produces the Tabular zip file.'
    doLast {
        println 'Done!'
    }
}

task copyTabularZipToDistDirectory(type: Copy) {
    from 'build/dist/zip/'
    into 'dist/'
}

buildTabularZip.dependsOn createTabularZip
buildTabularZip.dependsOn copyAdditionalResources
buildTabularZip.dependsOn copyAdditionalLibs
buildTabularZip.dependsOn copyJfxFiles
buildTabularZip.dependsOn jfxJar
buildTabularZip.dependsOn copyTabularZipToDistDirectory

copyTabularZipToDistDirectory.dependsOn createTabularZip
createTabularZip.dependsOn copyAdditionalResources
createTabularZip.dependsOn copyJfxFiles
copyJfxFiles.dependsOn jfxJar
